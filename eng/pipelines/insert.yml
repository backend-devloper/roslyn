parameters:
  # These are actually a booleans but must be defined as string.
  # Parameters are evaluated at compile time, but all variables are strings at compile time.
  # So in order to pass a parameter that comes from a variable these must be typed as string.
  - name: createDraftPR
    type: string
    default: ''
  - name: autoComplete
    type: string
    default: ''
  - name: insertToolset
    type: string
    default: ''

  - name: clientId
    type: string
  - name: clientSecret
    type: string

  - name: vsBranchName
    type: string
    default: ''
  - name: componentBuildProjectName
    type: string
    default: ''
  - name: titlePrefix
    type: string
    default: ''

  - name: sourceBranch
    type: string

steps:
  - checkout: none

  - task: NuGetCommand@2
    displayName: 'Install RIT from Azure Artifacts'
    inputs:
      command: custom
      arguments: 'install RoslynTools.VisualStudioInsertionTool -PreRelease -Source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'

  - powershell: |
      $response = Invoke-RestMethod -Headers @{Authorization = "Bearer $(System.AccessToken)"} "https://dev.azure.com/dnceng/internal/_apis/git/repositories/dotnet-roslyn/items?path=eng/config/PublishData.json&api-version=6.0"
      $branchName = "${{ parameters.sourceBranch }}"
      $branchData = $response.branches.$branchName
      if (!$branchData)
      {
        Write-Host "No PublishData found for branch '$branchName'. Using PublishData for branch 'main'."
        $branchData = $response.branches.main
      }

      Write-Host "##vso[task.setvariable variable=Template.CreateDraftPR]$($true)"
      Write-Host "##vso[task.setvariable variable=Template.AutoComplete]$($false)"
      Write-Host "##vso[task.setvariable variable=Template.TitlePrefix]$('')"
      Write-Host "##vso[task.setvariable variable=Template.InsertToolset]$($true)"
      Write-Host "##vso[task.setvariable variable=Template.ComponentAzdoUri]$('')"
      Write-Host "##vso[task.setvariable variable=Template.ComponentProjectName]$('')"

      Write-Host "##vso[task.setvariable variable=Template.ComponentBranchName]$branchName"
      Write-Host "##vso[task.setvariable variable=Template.VSBranchName]$($branchData.vsBranch)"

      if ($null -ne $branchData.insertionCreateDraftPR)
      {
        Write-Host "##vso[task.setvariable variable=Template.CreateDraftPR]$($branchData.insertionCreateDraftPR)"
      }

      if ($null -ne $branchData.insertionCreateDraftPR)
      {
        Write-Host "##vso[task.setvariable variable=Template.AutoComplete]$(-not $branchData.insertionCreateDraftPR)"
      }

      if ($null -ne $branchData.insertionTitlePrefix)
      {
        Write-Host "##vso[task.setvariable variable=Template.TitlePrefix]$($branchData.insertionTitlePrefix)"
      }

      if ($null -ne $branchData.insertToolset)
      {
        Write-Host "##vso[task.setvariable variable=Template.InsertToolset]$($branchData.insertToolset)"
      }

    displayName: Set Variables from PublishData

  - powershell: |
      if ("" -ne $Env:CreateDraftPR)
      {
        Write-Host "Setting CreateDraftPR to $Env:CreateDraftPR"
        Write-Host "##vso[task.setvariable variable=Template.CreateDraftPR]$Env:CreateDraftPR"
      }

      if ("" -ne $Env:AutoComplete)
      {
        Write-Host "Setting AutoComplete to $Env:AutoComplete"
        Write-Host "##vso[task.setvariable variable=Template.AutoComplete]$Env:AutoComplete"
      }

      if ("" -ne $Env:TitlePrefix)
      {
        Write-Host "Setting TitlePrefix to $Env:TitlePrefix"
        Write-Host "##vso[task.setvariable variable=Template.TitlePrefix]$Env:TitlePrefix"
      }

      if ("" -ne $Env:InsertToolset)
      {
        Write-Host "Setting InsertToolset to $Env:InsertToolset"
        Write-Host "##vso[task.setvariable variable=Template.InsertToolset]$Env:InsertToolset"
      }

      if ("" -ne $Env:VSBranchName)
      {
        Write-Host "Setting VSBranchName to $Env:VSBranchName"
        Write-Host "##vso[task.setvariable variable=Template.VSBranchName]$Env:VSBranchName"
      }

      if ("" -ne $Env:ComponentBuildProjectName)
      {
        Write-Host "Setting component Azdo parameters $($(System.CollectionUri)) and $Env:ComponentBuildProjectName"
        Write-Host "##vso[task.setvariable variable=Template.ComponentAzdoUri]$($(System.CollectionUri))"
        Write-Host "##vso[task.setvariable variable=Template.ComponentProjectName]$Env:ComponentBuildProjectName"
      }

    displayName: Set Variables from Input Parameters
    env:
      CreateDraftPR: ${{ parameters.createDraftPR }}
      AutoComplete: ${{ parameters.autoComplete }}
      TitlePrefix: ${{ parameters.titlePrefix }}
      InsertToolset: ${{ parameters.insertToolset }}
      VSBranchName: ${{ parameters.vsBranchName }}
      ComponentBuildProjectName: ${{ parameters.componentBuildProjectName }}

  # Now that everything is set, actually perform the insertion.
  - powershell: |
      mv RoslynTools.VisualStudioInsertionTool.* RIT
      .\RIT\tools\OneOffInsertion.ps1 `
        -autoComplete "$(Template.AutoComplete)" `
        -buildQueueName "$(Build.DefinitionName)" `
        -cherryPick "(default)" `
        -clientId "${{ parameters.clientId }}" `
        -clientSecret "${{ parameters.clientSecret }}" `
        -componentAzdoUri "$(Template.ComponentAzdoUri)" `
        -componentProjectName "$(Template.ComponentProjectName)" `
        -componentName "Roslyn" `
        -componentGitHubRepoName "dotnet/roslyn" `
        -componentBranchName "$(Template.ComponentBranchName)" `
        -createDraftPR "$(Template.CreateDraftPR)" `
        -defaultValueSentinel "(default)" `
        -dropPath "(default)" `
        -insertCore "(default)" `
        -insertDevDiv "(default)" `
        -insertionCount "1" `
        -insertToolset "$(Template.InsertToolset)" `
        -titlePrefix "$(Template.TitlePrefix)" `
        -titleSuffix "(default)" `
        -queueValidation "true" `
        -requiredValueSentinel "REQUIRED" `
        -reviewerGUID "6c25b447-1d90-4840-8fde-d8b22cb8733e" `
        -specificBuild "$(Build.BuildNumber)" `
        -updateAssemblyVersions "(default)" `
        -updateCoreXTLibraries "(default)" `
        -visualStudioBranchName "$(Template.VSBranchName)" `
        -writePullRequest "prid.txt" `
    displayName: 'Run OneOffInsertion.ps1'

  - script: 'echo. && echo. && type "prid.txt" && echo. && echo.'
    displayName: 'Report PR URL'
