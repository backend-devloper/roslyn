<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <NonShipping>true</NonShipping>
    <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <OutputType>Library</OutputType>
    <RootNamespace>Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests</RootNamespace>
    <AssemblyName>Roslyn.Compilers.CSharp.CommandLine.UnitTests</AssemblyName>
    <TargetFramework>net461</TargetFramework>
    <RuntimeIdentifier>$(RoslynDesktopRuntimeIdentifier)</RuntimeIdentifier>
    <RoslynProjectType>UnitTest</RoslynProjectType>
  </PropertyGroup>
  <ItemGroup Label="Project References">
    <ProjectReference Include="..\..\..\..\Test\Utilities\Portable\TestUtilities.csproj" />
    <ProjectReference Include="..\..\..\Test\Utilities\CSharp\CSharpCompilerTestUtilities.csproj" />
    <ProjectReference Include="..\..\csc\csc.csproj" ReferenceOutputAssembly="false" OutputItemType="TaskWithDependencyResolvedProjectReferencePath" />
    <ProjectReference Include="..\..\..\Core\Portable\CodeAnalysis.csproj" />
    <ProjectReference Include="..\..\..\Test\Resources\Core\CompilerTestResources.csproj" />
    <ProjectReference Include="..\..\Portable\CSharpCodeAnalysis.csproj" />
    <ProjectReference Include="..\..\..\VisualBasic\Portable\BasicCodeAnalysis.vbproj" />
    <ProjectReference Include="..\..\..\..\Test\PdbUtilities\PdbUtilities.csproj" />
  </ItemGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|AnyCPU'" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|AnyCPU'" />
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.Linq" />
    <PackageReference Include="xunit" Version="$(xunitVersion)" />
    <PackageReference Include="xunit.analyzers" Version="$(xunitanalyzersVersion)" />
    <PackageReference Include="xunit.runner.console" Version="$(xunitrunnerconsoleVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="$(xunitrunnervisualstudioVersion)" />
  </ItemGroup>
  <ItemGroup>
    <Compile Update="CommandLineTestResources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>CommandLineTestResources.resx</DependentUpon>
    </Compile>
    <AssemblyVersionAttribute Include="Microsoft.CodeAnalysis.CommitHashAttribute">
      <_Parameter1>$(CommitHashDisplay)</_Parameter1>
    </AssemblyVersionAttribute>
  </ItemGroup>
  <ItemGroup>
    <Service Include="{82A7F48D-3B50-4B1E-B82E-3ADA8210C358}" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="CommandLineTestResources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>CommandLineTestResources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="CopyTestProjects" AfterTargets="ResolveProjectReferences">
    <!-- In TypeLoader, the following logic is used for loading assemblies on .NET Core:
            - if the simple name of the assembly exists in the same folder as msbuild.exe, then that assembly gets loaded, indifferent of the user specified path
            - otherwise, the assembly from the user specified path is loaded, if it exists.
            
          So the custom tasks we are testing can't be in test output folder, because on .NET Core that would affect the loading behavior.  So this
          target puts them in subfolders of the test output folder instead.    
    -->

    <Error Condition="'@(TaskWithDependencyResolvedProjectReferencePath)' == ''" Text="Couldn't find TaskWithDependencyResolvedProjectReferencePath item for TaskWithDependency" />
    
    <PropertyGroup>
      <TaskWithDependencyOutputPath>@(TaskWithDependencyResolvedProjectReferencePath->'%(RootDir)%(Directory)')</TaskWithDependencyOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <TaskWithDependencyContentContent Include="$(TaskWithDependencyOutputPath)*.*" />
      <Content Include="@(TaskWithDependencyContentContent)" Link="csc\%(TaskWithDependencyContentContent.Filename)%(TaskWithDependencyContentContent.Extension)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
    
  </Target>
  
</Project>
