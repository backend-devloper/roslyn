*REMOVED*Microsoft.CodeAnalysis.Options.IOption
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.DefaultValue.get -> object
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.Feature.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage.get -> bool
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.Name.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation>
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.Type.get -> System.Type
*REMOVED*Microsoft.CodeAnalysis.Options.OptionStorageLocation
*REMOVED*Microsoft.CodeAnalysis.Options.OptionStorageLocation.OptionStorageLocation() -> void
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.DefaultValue.get -> T
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Feature.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Name.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.PerLanguageOption(string feature, string name, T defaultValue) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.PerLanguageOption(string feature, string name, T defaultValue, params Microsoft.CodeAnalysis.Options.OptionStorageLocation[] storageLocations) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation>
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Type.get -> System.Type
*REMOVED*override Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.ToString() -> string
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddEventHandler(Microsoft.CodeAnalysis.SyntaxNode event, Microsoft.CodeAnalysis.SyntaxNode handler) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LockStatement(Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveEventHandler(Microsoft.CodeAnalysis.SyntaxNode event, Microsoft.CodeAnalysis.SyntaxNode handler) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.ApplyChangesKind.ChangeDocumentInfo = 16 -> Microsoft.CodeAnalysis.ApplyChangesKind
Microsoft.CodeAnalysis.Document.WithFilePath(string filePath) -> Microsoft.CodeAnalysis.Document
Microsoft.CodeAnalysis.Document.WithFolders(System.Collections.Generic.IEnumerable<string> folders) -> Microsoft.CodeAnalysis.Document
Microsoft.CodeAnalysis.Document.WithName(string name) -> Microsoft.CodeAnalysis.Document
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol typeSymbol, bool addImport) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Options.IOption (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.DefaultValue { get; } -> object (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.DefaultValue.get -> object (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Feature { get; } -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Feature.get -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage { get; } -> bool (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage.get -> bool (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Name { get; } -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Name.get -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.StorageLocations { get; } -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation> (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation> (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Type { get; } -> System.Type (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Type.get -> System.Type (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionStorageLocation (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionStorageLocation.OptionStorageLocation() -> void (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.PerLanguageOption<> (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Solution.WithDocumentFilePath(Microsoft.CodeAnalysis.DocumentId documentId, string filePath) -> Microsoft.CodeAnalysis.Solution
Microsoft.CodeAnalysis.Solution.WithDocumentName(Microsoft.CodeAnalysis.DocumentId documentId, string name) -> Microsoft.CodeAnalysis.Solution
Microsoft.CodeAnalysis.Workspace.OnDocumentInfoChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.DocumentInfo newInfo) -> void
Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentInfoChanged = 17 -> Microsoft.CodeAnalysis.WorkspaceChangeKind
virtual Microsoft.CodeAnalysis.Workspace.ApplyDocumentInfoChanged(Microsoft.CodeAnalysis.DocumentId id, Microsoft.CodeAnalysis.DocumentInfo info) -> void
virtual Microsoft.CodeAnalysis.Workspace.CanApplyParseOptionChange(Microsoft.CodeAnalysis.ParseOptions oldOptions, Microsoft.CodeAnalysis.ParseOptions newOptions, Microsoft.CodeAnalysis.Project project) -> bool
