<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <MicrosoftNETCoreAppRuntimewinx64Version>$(MicrosoftNetCoreAppPackagesVersion)</MicrosoftNETCoreAppRuntimewinx64Version>
    <MicrosoftWindowsDesktopAppRuntimewinx64Version>$(MicrosoftNetCoreAppPackagesVersion)</MicrosoftWindowsDesktopAppRuntimewinx64Version>
    <MicrosoftNETCoreAppcrossgen2winx64Version>$(MicrosoftNetCoreAppPackagesVersion)</MicrosoftNETCoreAppcrossgen2winx64Version>
    <!--
    The purpose of this project is to include all dependecies of Microsoft.CodeAnalysis.Remote.ServiceHub and C# and VB features layer targeting .Net Core.
    -->
    <IsShipping>false</IsShipping>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\ServiceHub\Microsoft.CodeAnalysis.Remote.ServiceHub.csproj" />
    <ProjectReference Include="..\..\..\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj" />
    <ProjectReference Include="..\..\..\Features\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.Features.vbproj" />
  </ItemGroup>
  <ItemGroup>
    <!-- These references need to be deployed to the vsix subfolder containing servicehub bits for .Net Core -->
    <PackageReference Include="Microsoft.VisualStudio.Telemetry" Version="$(MicrosoftVisualStudioTelemetryVersion)" />
    <PackageReference Include="SQLitePCLRaw.bundle_green" Version="$(SQLitePCLRawbundle_greenVersion)" />
    <!--
      We use the content of these two runtime pacakges to: 
        - exclude BCL library from the dependencies we need to deploy as part of Roslyn vsix.
        - compile ReadyToRun binaries
    -->
    <PackageReference Include="Microsoft.NETCore.App.Runtime.win-x64" Version="$(MicrosoftNETCoreAppRuntimewinx64Version)" ExcludeAssets="all" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WindowsDesktop.App.Runtime.win-x64" Version="$(MicrosoftWindowsDesktopAppRuntimewinx64Version)" ExcludeAssets="all" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.NETCore.App.crossgen2.win-x64" Version="$(MicrosoftNETCoreAppcrossgen2winx64Version)" ExcludeAssets="all" PrivateAssets="all" GeneratePathProperty="true" />
  </ItemGroup>

  <Target Name="LocateCrossgenTargets" DependsOnTargets="Publish">
    <ItemGroup>
      <!-- Find all Roslyn assemblies that we want to crossgen -->
      <_ProjectReferenceAssemblies Include="@(_ResolvedProjectReferencePaths->'%(FileName)%(Extension)')" />
      <!-- Find all assemblies (including Roslyn and all dependencies) from the actual published location -->
      <_AllPublishedAssemblyPaths Include="$(PublishDir)\**\*.dll" Exclude="$(PublishDir)\**\*.resources.dll" />
      <_AllPublishedAssemblies Include="@(_AllPublishedAssemblyPaths->'%(FileName)%(Extension)')" >
        <_FullFilePath>%(FullPath)</_FullFilePath>
      </_AllPublishedAssemblies>
      <!-- Get all non-Roslyn assemblies as a subset of all published ones, we don't crossgen those -->
      <_NoR2RAssemblies Include="@(_AllPublishedAssemblies)" Exclude="@(_ProjectReferenceAssemblies)" >
        <_FullFilePath>%(_AllPublishedAssemblies._FullFilePath)</_FullFilePath>
      </_NoR2RAssemblies>
      <_NoR2RAssemblyPaths Include="@(_NoR2RAssemblies->'%(_FullFilePath)')" />
      <!-- Now we get all Roslyn assemblies in the publish folder -->
      <_RoslynAssemblyPaths Include="@(_AllPublishedAssemblyPaths)" Exclude="@(_NoR2RAssemblyPaths)" />
    </ItemGroup>
    
    <PropertyGroup>
      <CrossgenWorkFolder>$(PublishDir)\CrossGen\</CrossgenWorkFolder>
      <OriginalAssemblyFolder>$(CrossgenWorkFolder)OriginalAssemblies\</OriginalAssemblyFolder>
    </PropertyGroup>   

     <Message Text="Moving Files @(_RoslynAssemblyPaths)"/>
     <Move SourceFiles="@(_RoslynAssemblyPaths)" DestinationFolder="$(OriginalAssemblyFolder)">
       <Output 
          TaskParameter="DestinationFiles"
          ItemName="_FilesWritten"/>
     </Move>

    <ItemGroup>
      <_CrossgenTargetPaths Include="$(OriginalAssemblyFolder)\*.dll" />
      <_RoslynDependencies Include="@(_CrossgenTargetPaths)" />
    </ItemGroup>

  </Target>

  <Target Name="CompileReadyToRun" DependsOnTargets="LocateCrossgenTargets;LocateDependencies" Outputs="%(_CrossgenTargetPaths.FullPath)">  
    
    <PropertyGroup>    
      <_Crossgen2Path>$(PkgMicrosoft_NETCore_App_crossgen2_win-x64)\tools\crossgen2.dll</_Crossgen2Path>
      <_R2ROptimizeAssemblyPath>%(_CrossgenTargetPaths.FullPath)</_R2ROptimizeAssemblyPath>
      <_R2ROptimizeAssemblyOutputPath>$(PublishDir)\%(_CrossgenTargetPaths.Filename)%(_CrossgenTargetPaths.Extension)</_R2ROptimizeAssemblyOutputPath>      
      <_RspFilePath>$(CrossgenWorkFolder)%(_CrossgenTargetPaths.Filename).CrossgenArgs.rsp</_RspFilePath>
    </PropertyGroup>
    <Delete Files="$(_RspFilePath)" Condition="exists('$(_RspFilePath)')" />
    <ItemGroup>
      <RspFile Include="$(_RspFilePath)" />
      <Lines Include="$(_R2ROptimizeAssemblyPath)" />
      <Lines Include="--out:$(_R2ROptimizeAssemblyOutputPath)" />
      <Lines Include="--targetarch:x64" />
      <Lines Include="--optimize" />
      <Lines Include="@(_RuntimeLibraries->'--reference:%(FullPath)')" />
      <Lines Include="@(_RoslynDependencies->'--reference:%(FullPath)')" />
      <Lines Include="@(_NonRuntimeAssembliesInPublishFolder->'--reference:%(FullPath)')" Exclude="@(_RoslynDependencies)"/>
    </ItemGroup>

    <WriteLinesToFile File="@(RspFile)" Lines="@(Lines)" />
  
    <Exec Command='$(DotNetTool) exec "$(_Crossgen2Path)" @$(_RspFilePath)' ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_Crossgen2Output" />
      <Output TaskParameter="ExitCode" PropertyName="_Crossgen2ErrorCode" />
    </Exec>
    <Message Text="$(_Crossgen2Output)" />             
    <Error Text="Crossgen2 failed with exit code $(_Crossgen2ErrorCode)." Condition="'$(_Crossgen2ErrorCode)' != '0'" />

  </Target>

  <Target Name="LocateDependencies" DependsOnTargets="Publish">
    <ItemGroup>
      <_RuntimeLibraries Include="$(PkgMicrosoft_NETCore_App_Runtime_win-x64)\runtimes\win-x64\**\*.dll" />
      <_WinRuntimeLibraries Include="$(PkgMicrosoft_WindowsDesktop_App_Runtime_win-x64)\runtimes\win-x64\**\*.dll" />
      <_RuntimeLibrariesInPublishFolder Include="@(_RuntimeLibraries->'$(PublishDir)\%(FileName)%(Extension)')" />
      <_RuntimeLibrariesInPublishFolder Include="@(_WinRuntimeLibraries->'$(PublishDir)\%(FileName)%(Extension)')" />
      <_NonRuntimeAssembliesInPublishFolder Include="$(PublishDir)\*.dll" Exclude="@(_RuntimeLibrariesInPublishFolder)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishProjectOutputGroup" DependsOnTargets="CompileReadyToRun" Returns="@(_PublishedFiles)">
    <ItemGroup>
      <_ExcludedFiles Include="$(PublishDir)**\Microsoft.CodeAnalysis.Remote.ServiceHub.CoreComponents.*" />
      <_ExcludedFiles Include="$(PublishDir)**\*.pdb" />
      <_ExcludedFiles Include="$(CrossgenWorkFolder)**\*" />

      <!-- the only assembly we need under runtime folder (runtimes\win-x64\native\e_sqlite3.dll) is handled by the vsix project directly -->
      <_ExcludedFiles Include="$(PublishDir)\runtimes\**\*.*" />
      <!-- 
        For BCL, we want to use the version provided by the runtime in VS, not the ones from the NuGet packages. 
        However, we can't safely exclude shared dependencies from ServiceHub host folder: we might be referencing
        a higher version, or back-compat might not be guaranteed in the version shipped by host.
      -->
      <_ExcludedFiles Include="@(_RuntimeLibrariesInPublishFolder)" />
    </ItemGroup>
    <ItemGroup>
      <!-- Need to include and then update items (https://github.com/microsoft/msbuild/issues/1053) -->
      <_PublishedFiles Include="$(PublishDir)**\*.*" Exclude="@(_ExcludedFiles)"/>
      <!-- Set TargetPath -->
      <_PublishedFiles Update="@(_PublishedFiles)" TargetPath="%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>
  </Target>
</Project>