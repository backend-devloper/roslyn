// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.CodeAnalysis.CodeFixes;

namespace Microsoft.CodeAnalysis.ExternalAccess.Razor
{
    internal static class RazorPredefinedCodeFixProviderNames
    {
        public const string AddDocCommentNodes = PredefinedCodeFixProviderNames.AddDocCommentNodes;
        public const string AddAsync = PredefinedCodeFixProviderNames.AddAsync;
        public const string AddParameter = PredefinedCodeFixProviderNames.AddParameter;
        public const string AddParenthesesAroundConditionalExpressionInInterpolatedString = PredefinedCodeFixProviderNames.AddParenthesesAroundConditionalExpressionInInterpolatedString;
        public const string AliasAmbiguousType = PredefinedCodeFixProviderNames.AliasAmbiguousType;
        public const string ApplyNamingStyle = PredefinedCodeFixProviderNames.ApplyNamingStyle;
        public const string AddBraces = PredefinedCodeFixProviderNames.AddBraces;
        public const string ChangeReturnType = PredefinedCodeFixProviderNames.ChangeReturnType;
        public const string ChangeToYield = PredefinedCodeFixProviderNames.ChangeToYield;
        public const string ConfigureCodeStyleOption = PredefinedCodeFixProviderNames.ConfigureCodeStyleOption;
        public const string ConfigureSeverity = PredefinedCodeFixProviderNames.ConfigureSeverity;
        public const string ConvertToAsync = PredefinedCodeFixProviderNames.ConvertToAsync;
        public const string ConvertToIterator = PredefinedCodeFixProviderNames.ConvertToIterator;
        public const string CorrectNextControlVariable = PredefinedCodeFixProviderNames.CorrectNextControlVariable;
        public const string ConvertTypeOfToNameOf = PredefinedCodeFixProviderNames.ConvertTypeOfToNameOf;
        public const string RemoveDocCommentNode = PredefinedCodeFixProviderNames.RemoveDocCommentNode;
        public const string AddMissingReference = PredefinedCodeFixProviderNames.AddMissingReference;
        public const string AddImport = PredefinedCodeFixProviderNames.AddImport;
        public const string FullyQualify = PredefinedCodeFixProviderNames.FullyQualify;
        public const string FixFormatting = PredefinedCodeFixProviderNames.FixFormatting;
        public const string FixIncorrectFunctionReturnType = PredefinedCodeFixProviderNames.FixIncorrectFunctionReturnType;
        public const string FixIncorrectExitContinue = PredefinedCodeFixProviderNames.FixIncorrectExitContinue;
        public const string FixReturnType = PredefinedCodeFixProviderNames.FixReturnType;
        public const string GenerateConstructor = PredefinedCodeFixProviderNames.GenerateConstructor;
        public const string GenerateEndConstruct = PredefinedCodeFixProviderNames.GenerateEndConstruct;
        public const string GenerateEnumMember = PredefinedCodeFixProviderNames.GenerateEnumMember;
        public const string GenerateEvent = PredefinedCodeFixProviderNames.GenerateEvent;
        public const string GenerateVariable = PredefinedCodeFixProviderNames.GenerateVariable;
        public const string GenerateMethod = PredefinedCodeFixProviderNames.GenerateMethod;
        public const string GenerateConversion = PredefinedCodeFixProviderNames.GenerateConversion;
        public const string GenerateDeconstructMethod = PredefinedCodeFixProviderNames.GenerateDeconstructMethod;
        public const string GenerateType = PredefinedCodeFixProviderNames.GenerateType;
        public const string ImplementAbstractClass = PredefinedCodeFixProviderNames.ImplementAbstractClass;
        public const string ImplementInterface = PredefinedCodeFixProviderNames.ImplementInterface;
        public const string MakeFieldReadonly = PredefinedCodeFixProviderNames.MakeFieldReadonly;
        public const string MakeStatementAsynchronous = PredefinedCodeFixProviderNames.MakeStatementAsynchronous;
        public const string MakeMethodSynchronous = PredefinedCodeFixProviderNames.MakeMethodSynchronous;
        public const string MoveMisplacedUsingDirectives = PredefinedCodeFixProviderNames.MoveMisplacedUsingDirectives;
        public const string MoveToTopOfFile = PredefinedCodeFixProviderNames.MoveToTopOfFile;
        public const string PopulateSwitch = PredefinedCodeFixProviderNames.PopulateSwitch;
        public const string QualifyMemberAccess = PredefinedCodeFixProviderNames.QualifyMemberAccess;
        public const string ReplaceDefaultLiteral = PredefinedCodeFixProviderNames.ReplaceDefaultLiteral;
        public const string RemoveUnnecessaryCast = PredefinedCodeFixProviderNames.RemoveUnnecessaryCast;
        public const string DeclareAsNullable = PredefinedCodeFixProviderNames.DeclareAsNullable;
        public const string RemoveAsyncModifier = PredefinedCodeFixProviderNames.RemoveAsyncModifier;
        public const string RemoveUnnecessaryImports = PredefinedCodeFixProviderNames.RemoveUnnecessaryImports;
        public const string RemoveUnnecessaryAttributeSuppressions = PredefinedCodeFixProviderNames.RemoveUnnecessaryAttributeSuppressions;
        public const string RemoveUnnecessaryPragmaSuppressions = PredefinedCodeFixProviderNames.RemoveUnnecessaryPragmaSuppressions;
        public const string RemoveUnreachableCode = PredefinedCodeFixProviderNames.RemoveUnreachableCode;
        public const string RemoveUnusedValues = PredefinedCodeFixProviderNames.RemoveUnusedValues;
        public const string RemoveUnusedLocalFunction = PredefinedCodeFixProviderNames.RemoveUnusedLocalFunction;
        public const string RemoveUnusedMembers = PredefinedCodeFixProviderNames.RemoveUnusedMembers;
        public const string RemoveUnusedVariable = PredefinedCodeFixProviderNames.RemoveUnusedVariable;
        public const string SimplifyNames = PredefinedCodeFixProviderNames.SimplifyNames;
        public const string SimplifyThisOrMe = PredefinedCodeFixProviderNames.SimplifyThisOrMe;
        public const string SpellCheck = PredefinedCodeFixProviderNames.SpellCheck;
        public const string Suppression = PredefinedCodeFixProviderNames.Suppression;
        public const string AddOverloads = PredefinedCodeFixProviderNames.AddOverloads;
        public const string AddNew = PredefinedCodeFixProviderNames.AddNew;
        public const string RemoveNew = PredefinedCodeFixProviderNames.RemoveNew;
        public const string UpdateLegacySuppressions = PredefinedCodeFixProviderNames.UpdateLegacySuppressions;
        public const string UnsealClass = PredefinedCodeFixProviderNames.UnsealClass;
        public const string UseImplicitType = PredefinedCodeFixProviderNames.UseImplicitType;
        public const string UseExplicitType = PredefinedCodeFixProviderNames.UseExplicitType;
        public const string UseExplicitTypeForConst = PredefinedCodeFixProviderNames.UseExplicitTypeForConst;
        public const string UseCollectionInitializer = PredefinedCodeFixProviderNames.UseCollectionInitializer;
        public const string UseObjectInitializer = PredefinedCodeFixProviderNames.UseObjectInitializer;
        public const string UseThrowExpression = PredefinedCodeFixProviderNames.UseThrowExpression;
        public const string PreferFrameworkType = PredefinedCodeFixProviderNames.PreferFrameworkType;
        public const string MakeStructFieldsWritable = PredefinedCodeFixProviderNames.MakeStructFieldsWritable;
        public const string AddExplicitCast = PredefinedCodeFixProviderNames.AddExplicitCast;
        public const string RemoveIn = PredefinedCodeFixProviderNames.RemoveIn;
        public const string SimplifyLinqExpression = PredefinedCodeFixProviderNames.SimplifyLinqExpression;
        public const string ChangeNamespaceToMatchFolder = PredefinedCodeFixProviderNames.ChangeNamespaceToMatchFolder;
        public const string ConvertAnonymousTypeToTuple = PredefinedCodeFixProviderNames.ConvertAnonymousTypeToTuple;
        public const string AddRequiredParentheses = PredefinedCodeFixProviderNames.AddRequiredParentheses;
        public const string AddAccessibilityModifiers = PredefinedCodeFixProviderNames.AddAccessibilityModifiers;
        public const string FileHeader = PredefinedCodeFixProviderNames.FileHeader;
        public const string UseSystemHashCode = PredefinedCodeFixProviderNames.UseSystemHashCode;
        public const string RemoveBlankLines = PredefinedCodeFixProviderNames.RemoveBlankLines;
        public const string OrderModifiers = PredefinedCodeFixProviderNames.OrderModifiers;
        public const string RemoveRedundantEquality = PredefinedCodeFixProviderNames.RemoveRedundantEquality;
        public const string RemoveUnnecessaryParentheses = PredefinedCodeFixProviderNames.RemoveUnnecessaryParentheses;
        public const string SimplifyConditionalExpression = PredefinedCodeFixProviderNames.SimplifyConditionalExpression;
        public const string SimplifyInterpolation = PredefinedCodeFixProviderNames.SimplifyInterpolation;
        public const string UseCoalesceExpression = PredefinedCodeFixProviderNames.UseCoalesceExpression;
        public const string UseCompoundAssignment = PredefinedCodeFixProviderNames.UseCompoundAssignment;
        public const string UseConditionalExpressionForAssignment = PredefinedCodeFixProviderNames.UseConditionalExpressionForAssignment;
        public const string UseConditionalExpressionForReturn = PredefinedCodeFixProviderNames.UseConditionalExpressionForReturn;
        public const string UseExplicitTupleName = PredefinedCodeFixProviderNames.UseExplicitTupleName;
        public const string UseInferredMemberName = PredefinedCodeFixProviderNames.UseInferredMemberName;
        public const string UseIsNullCheck = PredefinedCodeFixProviderNames.UseIsNullCheck;
        public const string UseNullPropagation = PredefinedCodeFixProviderNames.UseNullPropagation;
        public const string UseAutoProperty = PredefinedCodeFixProviderNames.UseAutoProperty;
        public const string ConsecutiveStatementPlacement = PredefinedCodeFixProviderNames.ConsecutiveStatementPlacement;
        public const string UsePatternCombinators = PredefinedCodeFixProviderNames.UsePatternCombinators;
        public const string ConvertSwitchStatementToExpression = PredefinedCodeFixProviderNames.ConvertSwitchStatementToExpression;
        public const string InvokeDelegateWithConditionalAccess = PredefinedCodeFixProviderNames.InvokeDelegateWithConditionalAccess;
        public const string RemoveUnnecessaryByVal = PredefinedCodeFixProviderNames.RemoveUnnecessaryByVal;
        public const string UseIsNotExpression = PredefinedCodeFixProviderNames.UseIsNotExpression;
        public const string UsePatternMatching = PredefinedCodeFixProviderNames.UsePatternMatching;
        public const string UseExpressionBody = PredefinedCodeFixProviderNames.UseExpressionBody;
        public const string ConstructorInitializerPlacement = PredefinedCodeFixProviderNames.ConstructorInitializerPlacement;
        public const string EmbeddedStatementPlacement = PredefinedCodeFixProviderNames.EmbeddedStatementPlacement;
        public const string RemoveConfusingSuppression = PredefinedCodeFixProviderNames.RemoveConfusingSuppression;
        public const string RemoveUnnecessaryDiscardDesignation = PredefinedCodeFixProviderNames.RemoveUnnecessaryDiscardDesignation;
        public const string UseCompoundCoalesceAssignment = PredefinedCodeFixProviderNames.UseCompoundCoalesceAssignment;
        public const string UseDeconstruction = PredefinedCodeFixProviderNames.UseDeconstruction;
        public const string UseDefaultLiteral = PredefinedCodeFixProviderNames.UseDefaultLiteral;
        public const string UseImplicitObjectCreation = PredefinedCodeFixProviderNames.UseImplicitObjectCreation;
        public const string UseIndexOperator = PredefinedCodeFixProviderNames.UseIndexOperator;
        public const string UseRangeOperator = PredefinedCodeFixProviderNames.UseRangeOperator;
        public const string UseSimpleUsingStatement = PredefinedCodeFixProviderNames.UseSimpleUsingStatement;
        public const string MakeLocalFunctionStatic = PredefinedCodeFixProviderNames.MakeLocalFunctionStatic;
        public const string PassInCapturedVariables = PredefinedCodeFixProviderNames.PassInCapturedVariables;
        public const string UseLocalFunction = PredefinedCodeFixProviderNames.UseLocalFunction;
        public const string InlineDeclaration = PredefinedCodeFixProviderNames.InlineDeclaration;
        public const string ConsecutiveBracePlacement = PredefinedCodeFixProviderNames.ConsecutiveBracePlacement;
        public const string AddPackage = PredefinedCodeFixProviderNames.AddPackage;
        public const string UpgradeProject = PredefinedCodeFixProviderNames.UpgradeProject;
        public const string AddAnonymousTypeMemberName = PredefinedCodeFixProviderNames.AddAnonymousTypeMemberName;
        public const string RemoveSharedFromModuleMembers = PredefinedCodeFixProviderNames.RemoveSharedFromModuleMembers;
        public const string DisambiguateSameVariable = PredefinedCodeFixProviderNames.DisambiguateSameVariable;
        public const string UseInterpolatedVerbatimString = PredefinedCodeFixProviderNames.UseInterpolatedVerbatimString;
        public const string MakeRefStruct = PredefinedCodeFixProviderNames.MakeRefStruct;
        public const string AddObsoleteAttribute = PredefinedCodeFixProviderNames.AddObsoleteAttribute;
        public const string ConflictMarkerResolution = PredefinedCodeFixProviderNames.ConflictMarkerResolution;
        public const string MakeTypeAbstract = PredefinedCodeFixProviderNames.MakeTypeAbstract;
        public const string MakeMemberStatic = PredefinedCodeFixProviderNames.MakeMemberStatic;
        public const string AssignOutParametersAtStart = PredefinedCodeFixProviderNames.AssignOutParametersAtStart;
        public const string AssignOutParametersAboveReturn = PredefinedCodeFixProviderNames.AssignOutParametersAboveReturn;
    }
}
