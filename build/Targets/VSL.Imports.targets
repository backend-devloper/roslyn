<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->

  <!-- This file is imported by all projects at the end of the project files -->
  <!-- Update common properties -->
  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'VB' AND '$(AssemblyName)' != ''">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'CSharp' AND '$(AssemblyName)' != ''">$(OutputPath)$(AssemblyName).xml</DocumentationFile>

    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(VSLToolsPath)\Rulesets\NonShippingProjectRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(AnalyzerProject)' == 'true'">$(VSLToolsPath)\Rulesets\AnalyzerProjectRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(VSLToolsPath)\Rulesets\Roslyn.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <Import Project="Signing.targets" />

  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.VisualBasic.targets"
          Condition="'$(ProjectLanguage)' == 'VB' And '$(TargetFrameworkIdentifier)' == '.NETPortable'"/>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets"
          Condition="'$(ProjectLanguage)' == 'CSharp' And '$(TargetFrameworkIdentifier)' == '.NETPortable'"/>

  <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets"
          Condition="'$(ProjectLanguage)' == 'VB' And '$(TargetFrameworkIdentifier)' != '.NETPortable'" />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets"
          Condition="'$(ProjectLanguage)' == 'CSharp' And '$(TargetFrameworkIdentifier)' != '.NETPortable'" />

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" Condition="'$(ProjectLanguage)' == 'C++'" />

  <!-- On Mono on *nix the NuGet targets aren't imported by default, so we do that here -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\NuGet\Microsoft.NuGet.targets"
          Condition="'$(OS)' != 'Windows_NT'" />

  <Choose>
    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable' AND
                     '$(TargetFrameworkVersion)' == 'v5.0'">
      <!-- Treat portable exes as CoreClr-targeting-exes -->
      <PropertyGroup Condition="'$(OutputType)' == 'Exe'">
        <NuGetTargetMoniker>DNXCore,Version=v5.0</NuGetTargetMoniker>
        <BaseNuGetRuntimeIdentifier Condition="'$(OS)' == 'Windows_NT'">win7</BaseNuGetRuntimeIdentifier>
      </PropertyGroup>

      <!-- Upgrade portable projects to .NETStandard 1.3 -->
      <PropertyGroup Condition="'$(OutputType)' == 'Library'">
        <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- It looks like MSBuild has a bug on *nix where they aggressively
       directory separators from '\' to '/', even when the '\'
       is being used as an escape character in a define constant in VB.
       This change works around the bug by removing all quotes from
       define constants after Microsoft.VisualBasic.CurrentVersion adds
       them in our build. This should be OK since none of our constants
       should require quoting. See https://github.com/Microsoft/msbuild/issues/137 -->
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <FinalDefineConstants>$(FinalDefineConstants.Replace('"', ''))</FinalDefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      CopyCppOutputBackToIntDir;
    </BuildDependsOn>
  </PropertyGroup>

  <!-- A task for C++ projects to copy their output back under obj\Debug or the like. This is slightly hacky. -->
  <Target
    Name="CopyCppOutputBackToIntDir" Condition="'$(ProjectLanguage)' == 'C++'">

    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(IntDir)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(OutDir)$(TargetName).pdb" DestinationFolder="$(IntDir)" SkipUnchangedFiles="true" Condition="Exists('$(OutDir)$(TargetName).pdb')" />
  </Target>

  <!-- Verify some build flags are correct -->
  <PropertyGroup>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);VerifyBuildFlags</PrepareForBuildDependsOn>
  </PropertyGroup>

  <Target Name="VerifyBuildFlags">
    <Error 
        Condition="'$(CheckForOverflowUnderflow)' != '' OR '$(RemoveIntegerChecks)' != ''"
        Text="The following properties cannot be set by individual projects: CheckForOverflowUnderflow and RemoveIntegerChecks" />
    
    <PropertyGroup Condition="'$(ProjectLanguage)' == 'CSharp'">
        <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    </PropertyGroup>

    <PropertyGroup Condition="'$(ProjectLanguage)' == 'VB'">
        <RemoveIntegerChecks>true</RemoveIntegerChecks>
    </PropertyGroup>
  </Target>

  <Import Project="VisualStudioSdk.targets" />

  <Import Project="GenerateAssemblyInfo.targets" Condition="'$(ProjectLanguage)' == 'CSharp' OR '$(ProjectLanguage)' == 'VB'" />
  <Import Project="GenerateVersionInfoResourceFile.targets" Condition="'$(ProjectLanguage)' == 'C++'" />

  <Import Project="GenerateInternalsVisibleTo.targets" />
  <Import Project="GenerateCompilerInternals.targets" />
  <Import Project="BinaryOptimization.targets" />
 </Project>
